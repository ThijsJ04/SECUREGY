To solve this problem, we need to break down the task into smaller steps. Here's how we can approach it:

1. We will use the `request` object from Flask to get the file contents from the request. This is done using the `file_contents` parameter in our route function.
2. The file contents may contain unnecessary characters before and after the actual data. To remove these, we can use string slicing. We will slice off everything before the first '{' and everything after the last '}'. This will give us a cleaned up version of the file contents.
3. Now that we have our cleaned up file contents, we need to evaluate it to a dictionary. In Python, we can use the `eval()` function to do this. However, using `eval()` can be unsafe if you're not sure what the contents are, as it can execute arbitrary code. For this problem, since we know that the contents will always be valid JSON (because they are coming from a request), we can use `eval()` without worrying about security issues.
4. Finally, we return the dictionary created by evaluating our cleaned up file contents.